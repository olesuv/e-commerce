// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateOrderInput struct {
	Title       *string     `json:"title,omitempty"`
	Description *string     `json:"description,omitempty"`
	Category    []*Category `json:"category,omitempty"`
	Price       *float64    `json:"price,omitempty"`
	Currency    *Currency   `json:"currency,omitempty"`
}

type CreateUserInput struct {
	Name     *string `json:"name,omitempty"`
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
}

type LoginUserInput struct {
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Category string

const (
	CategoryElectronics Category = "Electronics"
	CategoryFashion     Category = "Fashion"
	CategoryHome        Category = "Home"
	CategorySports      Category = "Sports"
	CategoryBooks       Category = "Books"
	CategoryAutomotive  Category = "Automotive"
	CategoryOther       Category = "Other"
)

var AllCategory = []Category{
	CategoryElectronics,
	CategoryFashion,
	CategoryHome,
	CategorySports,
	CategoryBooks,
	CategoryAutomotive,
	CategoryOther,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryElectronics, CategoryFashion, CategoryHome, CategorySports, CategoryBooks, CategoryAutomotive, CategoryOther:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Currency string

const (
	CurrencyUah Currency = "UAH"
	CurrencyUsd Currency = "USD"
	CurrencyEur Currency = "EUR"
)

var AllCurrency = []Currency{
	CurrencyUah,
	CurrencyUsd,
	CurrencyEur,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyUah, CurrencyUsd, CurrencyEur:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusAvailable Status = "Available"
	StatusArchived  Status = "Archived"
)

var AllStatus = []Status{
	StatusAvailable,
	StatusArchived,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusAvailable, StatusArchived:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
